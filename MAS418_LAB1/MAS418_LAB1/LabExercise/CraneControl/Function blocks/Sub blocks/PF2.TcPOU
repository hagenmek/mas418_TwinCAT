<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="PF2" Id="{cb0f563c-834c-4844-aa63-92622eb6af52}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PF2
VAR_INPUT
	ssMethodType: SINT;
	Enable: BOOL;
	usDelay: LREAL;
	kQf: LREAL;
	HPF_Num1: LREAL;
	HPF_Num2: LREAL;
	HPF_Den1: LREAL;
	HPF_Den2: LREAL;
	GVI_Num1: LREAL;
	GVI_Num2: LREAL;
	GVI_Num3: LREAL;
	GVI_Den1: LREAL;
	GVI_Den2: LREAL;
	GVI_Den3: LREAL;
	pAsimbar: LREAL;
	pBsimbar: LREAL;
END_VAR
VAR_OUTPUT
	uPF: LREAL;
END_VAR
VAR
	rtb_Add: LREAL;
	HP_Filter_tmp: LREAL;
	VectorConcatenate: ARRAY[0..1] OF LREAL;
	VectorConcatenate1: ARRAY[0..1] OF LREAL;
	VectorConcatenate2: ARRAY[0..2] OF LREAL;
	VectorConcatenate3: ARRAY[0..2] OF LREAL;
	HP_Filter_states: LREAL;
	Gv_Inv_states: ARRAY[0..1] OF LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE ssMethodType OF
    0: 
        (* InitializeConditions for DiscreteTransferFcn: '<S1>/HP_Filter' *)
        HP_Filter_states := 0.0;
        (* InitializeConditions for DiscreteTransferFcn: '<S1>/Gv_Inv' *)
        Gv_Inv_states[0] := 0.0;
        Gv_Inv_states[1] := 0.0;
    1: 
        (* SignalConversion: '<S1>/ConcatBufferAtVector ConcatenateIn1' *)
        VectorConcatenate[0] := HPF_Num1;
        (* SignalConversion: '<S1>/ConcatBufferAtVector ConcatenateIn2' *)
        VectorConcatenate[1] := HPF_Num2;
        (* SignalConversion: '<S1>/ConcatBufferAtVector Concatenate1In1' *)
        VectorConcatenate1[0] := HPF_Den1;
        (* SignalConversion: '<S1>/ConcatBufferAtVector Concatenate1In2' *)
        VectorConcatenate1[1] := HPF_Den2;
        (* DiscreteTransferFcn: '<S1>/HP_Filter' incorporates:
         *  Gain: '<S1>/Gain'
         *  Gain: '<S1>/Gain3'
         *  Gain: '<S1>/muC'
         *  Sum: '<S1>/Add' *)
        HP_Filter_tmp := (((100000.0 * pAsimbar) * 1.4083) - (100000.0 * pBsimbar)) - (VectorConcatenate1[1] * HP_Filter_states);
        (* SignalConversion: '<S1>/ConcatBufferAtVector Concatenate2In1' *)
        VectorConcatenate2[0] := GVI_Num1;
        (* SignalConversion: '<S1>/ConcatBufferAtVector Concatenate2In2' *)
        VectorConcatenate2[1] := GVI_Num2;
        (* SignalConversion: '<S1>/ConcatBufferAtVector Concatenate2In3' *)
        VectorConcatenate2[2] := GVI_Num3;
        (* SignalConversion: '<S1>/ConcatBufferAtVector Concatenate3In1' *)
        VectorConcatenate3[0] := GVI_Den1;
        (* SignalConversion: '<S1>/ConcatBufferAtVector Concatenate3In2' *)
        VectorConcatenate3[1] := GVI_Den2;
        (* SignalConversion: '<S1>/ConcatBufferAtVector Concatenate3In3' *)
        VectorConcatenate3[2] := GVI_Den3;
        (* DiscreteTransferFcn: '<S1>/Gv_Inv' incorporates:
         *  DiscreteTransferFcn: '<S1>/HP_Filter'
         *  Product: '<S1>/Product' *)
        rtb_Add := ((((VectorConcatenate[0] * HP_Filter_tmp) + (VectorConcatenate[1] * HP_Filter_states)) * kQf) - (VectorConcatenate3[1] * Gv_Inv_states[0])) - (VectorConcatenate3[2] * Gv_Inv_states[1]);
        (* Switch: '<S1>/Switch2' incorporates:
         *  Constant: '<S1>/Constant' *)

        IF Enable THEN 
            (* Switch: '<S1>/Switch1' incorporates:
             *  Constant: '<S1>/Constant'
             *  DiscreteTransferFcn: '<S1>/Gv_Inv' *)

            IF usDelay > 2.0 THEN 
                uPF := ((VectorConcatenate2[0] * rtb_Add) + (VectorConcatenate2[1] * Gv_Inv_states[0])) + (VectorConcatenate2[2] * Gv_Inv_states[1]);
            ELSE 
                uPF := 0.0;
            END_IF;

            (* End of Switch: '<S1>/Switch1' *)
        ELSE 
            uPF := 0.0;
        END_IF;

        (* End of Switch: '<S1>/Switch2' *)
        

        (* Saturate: '<S1>/Saturation5' *)

        IF uPF >= 1.0 THEN 
            uPF := 1.0;
        ELSIF uPF <= -1.0 THEN 
            uPF := -1.0;
        END_IF;

        (* End of Saturate: '<S1>/Saturation5' *)
        

        (* Update for DiscreteTransferFcn: '<S1>/HP_Filter' *)
        HP_Filter_states := HP_Filter_tmp;
        (* Update for DiscreteTransferFcn: '<S1>/Gv_Inv' *)
        Gv_Inv_states[1] := Gv_Inv_states[0];
        Gv_Inv_states[0] := rtb_Add;
END_CASE;

]]></ST>
    </Implementation>
    <LineIds Name="PF2">
      <LineId Id="3" Count="79" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>